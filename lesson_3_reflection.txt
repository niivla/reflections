When would you want to use a remote repository rather than keeping all your work local?

  When there's a sensible possibility of losing all your data (and that possibility is always present...). Also whenever you work with a development team or you want to share your work to the world!

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

  That's the same of when we were talking about commits. Git could update the repository while you're in the middle of a change in your project.

Describe the differences between forks, clones, and branches.  When would you use one instead of another?

  Well, branches are ramifications of the normal developing of your code inside the repository. Forks and clones are similar: with cloning you can have a repository copied in local, and forking is just cloning but on GitHub (and some more things like referencing original author and prevent your changes being commited onto their repositories).

What is the benefit of having a copy of the last known state of the remote stored locally?

  By this, we can make sure when there is a conflict between local and remote files, an out-of-sync issue. For if our file has been remotely and locally modified, the label of the origin/master (local) would not be at the same point as the remote master label. If that would the case, when we want to pull, git would check if those points are the same, and if not, it will make a branch and take the lastest change to local; then it will try to merge the file or prompt us so we can merge it manually.

How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?

  Well, we could collaborate in an office or by mail, telling the changes before and after happening. We could use other version-control systems, but I assume the question refers to any online version-control. By reuniting before coding it would be easier to have a whole view of the project and we would have more control of what we do and not do; but in terms of time and efficience, it would be a bit harder.

When would you want to make changes in a separate branch rather than directly in master?  What benefits does each approach have?
