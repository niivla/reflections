What happens when you initialize a repository? Why do you need to do it?

  All configuration files for git are created. It shall be done for using git in that repository and keep track of all the changes, version control stuff.

How is the staging area different from the working directory and the repository? What value do you think it offers?

  It's the in between step, we have to add the files from the working directory there in order to commit them later to the repository, it's not a phisical instance of memory. It offers a good step to make sure we are commiting what we want commit.

How can you use the staging area to make sure you have one commit per logical change?

  Using git diff to make sure all that is in the staging area is all what I want to commit. Same with git diff --staged.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

  First thing when you want to have a production version, as a RC or something you want to show. Secondly so you don't destroy anything when you're experimenting. This helps in letting you experiment and code without fear.

How do the diagrams help you visualize the branch structure?

  Well, you can get all the info with a glance.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

  We can set all the changes and features added in one branch, that we separated so we do not destroy anything important, to be present into the main (master) branch, so it's like production code. We represent that way because it's the most intuitive way to check out if two branches have merged, joining them in one dot.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
